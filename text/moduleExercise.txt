1. Determine what this Javascript code will print out (without running it):
                x = 1;
                var a = 5;
                var b = 10;
                var c = function(a, b, c) {
                        document.write(x);
                        document.write(a);
                        var f = function(a, b, c) {
                                b = a;
                                document.write(b);
                                b = c;
                                var x = 5;
                            }
                        f(a,b,c);
                        document.write(b);
                        var x = 10;
                    }
                c(8,9,10);
                document.write(b);
                document.write(x);
                }

        answer:undefined,8,8,9,10,1

2. define GLobal and Local Scope in javaScript.
 
    Answer:  global scope scope the scope of the variable is a windpow level, it is 
   declared outside the function. Local scope the variable is inside the function. 
    it is inside the function block.

 3.   //scope A
    function xFun(){
        //SCOPE b
        FUNCTION yFUN(){
            //scope c
        };
    };
  
 (a) Do statements in Scope A have access to variables defined in Scope B and C? No
  because the variable scope work from local up high to level.
(b) Do statements in Scope B have access to variables defined in Scope A?  yes
   statement in scope B can can access variable in scope A
(c) Do statements in Scope B have access to variables defined in Scope C?  No
    the variable scope work from  local up high to global
(d) Do statements in Scope C have access to variables defined in Scope A?  yes
    Statement in local scope can access variables in global scope as far they are not declared.
(e) Do statements in Scope C have access to variables defined in Scope B?  yes
 because local statement can access variable at containing in global scope for they are
not declared.

 4. What will be printed by the following (answer without running it)?
            var x = 9;
            function myFunction() {
                        return x * x;
                    }
            document.write(myFunction());
            x = 5;
            document.write(myFunction());

   answer: 81, 25 respetivily. 

5. var foo = 1;
            function bar() {
                 if (!foo) {
                        var foo = 10;
                    }
                alert(foo);
            }
            bar();
What will the alert print out? (Answer without running the code. Remember ‘hoisting’.)?

     Answer = 10;
 
6. Consider the following definition of an add( ) function to increment a counter variable:
            var add = (function () {
                    var counter = 0;
                    return function () {
                        return counter += 1;
                    }
            })();
 Modify the above module to define a count object with two methods: add( ) and reset( ). The count.add( ) method
adds one to the counter (as above). The count.reset( ) method sets the counter to 0.
  
Answer: 
             var count = ( function (){
                     var counter = 0;
                     const add = function(){ 
                     return counter += 1;
                          }
                        
                   const reset = function(){
                        return conter  = 0;
                      }
                return {
                add: add, 
                 reset:  reset
                 } ; })(); 
  7. In the definition of add( ) shown in question 6, identify the "free" variable. In the context of a function closure,
what is a "free" variable?
  
  answer:free variable is a variable declared outside the function, free variable is  
  a variable declard out side of the body of the funcion. for example in the about couter 
   variable is free variable for add and reset methods on number 6 above.

    8. The add( ) function defined in question 6 always adds 1 to the counter each time it is     called. Write a definition
    of a function make_adder(inc), whose return value is an add function with increment value    inc (instead of 1). Here
   is an example of using this function:
        add5 = make_adder(5);
        add5( ); add5( ); add5( ); // final counter value is 15
        add7 = make_adder(7);
        add7( ); add7( ); add7( ); // final counter value is 21
  
answer: 
        var count = (function(){
        var counter = 0;
        const add = function(inc){
            return counter += inc;
        };
        const reset = function(){
            return counter = 0;
        }; 
        const make_adder = function(inc){
            return add(inc);
        }; 
        return {
            add:add,
            reset:reset,
            make_adder:make_adder,
        };
    })();

  9.Suppose you are given a file of Javascript code containing a list of many function and   variable declarations. All of
  these function and variable names will be added to the Global Javascript namespace. What   simple modification to
  the Javascript file can remove all the names from the Global namespace?
 
 answer: I  can remove the global name space and the related naming collisions by using module  patern. 

   10. Using the Revealing Module Pattern, write a Javascript definition of a Module that   creates an Employee Object
   with the following fields and methods:
   Private Field: name
   Private Field: age
   Private Field: salary
   Public Method: setAge(newAge)
   Public Method: setSalary(newSalary)
   Public Method: setName(newName)
   Private Method: getAge( )
   Private Method: getSalary( )
   Private Method: getName( )
   Public Method: increaseSalary(percentage) // uses private getSalary( )
   Public Method: incrementAge( ) // uses private getAge( )

 answer: var Employee = (function(){
    let name = null;
    let age = 0;
    let salary = 0.0;
    const setName = function(newName){
        this.name = newName;
    };
    const setAge = function(newAge){
        this.age = newAge;
    };
    const setSalary = function(newSalary){
        this.age = age;
    };

    const getName = function(){
        return name;
    };
    const getAge = function(){
        return age;
    };
    const getSalary = function(){
        return salary;
    };
    const increaseSalary= function(percentage){
        return getSalary() * (percentage/100);
    };
    const incrementAge = function(){
        return getAge()+1;
    };
    return{
        setName:setName,
        setAge:setAge,
        setSalary:setSalary,
        increaseSalary:increaseSalary,
        incrementAge:incrementAge
    }
})();


 11. Rewrite your answer to Question 10 using the Anonymous Object Literal Return Pattern.
// 
// 
 12//

 13. ///

 14. What is the output of the following code?
const promise = new Promise((resolve, reject) => {
reject(“Hattori”);
});
promise.then(val => alert(“Success: “ + val))
 .catch(e => alert(“Error: “ + e));

answer: Error: Hattori

  15. What is the output of the following code?
 const promise = new Promise((resolve, reject) => {
 resolve(“Hattori”);
 setTimeout(()=> reject(“Yoshi”), 500);
 });
 promise.then(val => alert(“Success: “ + val))
 .catch(e => alert(“Error: “ + e));
  
answer : success Hattori

16. What is the output of the following code?

    function job(state) {
    return new Promise(function(resolve, reject) {
    if (state) {
   resolve('success');
    } else {
   reject('error');
   }
   });
   }
   let promise = job(true);
   promise.then(function(data) {
    console.log(data);
   return job(false);})
   .catch(function(error) {
   console.log(error);
   return 'Error caught';
   });

 ansewer:  sucess 
           error 



 




















